using DistributedLocker.DataBase;
using DistributedLocker.Internal;
using DistributedLocker.Oracle.Extensions;
using Oracle.ManagedDataAccess.Client;
using System;
using System.Data.Common;

namespace DistributedLocker.Oracle
{
    public class OracleDatabaseDistributedLockAdapter : IDatabaseDistributedLockAdapter
    {
        private const string CREATE = @"
                                DECLARE
	                                T_COUNT NUMBER;
                                BEGIN

	                                SELECT COUNT(*) INTO T_COUNT FROM USER_TABLES WHERE TABLE_NAME = 'SYS_LOCKER';
	
	                                IF T_COUNT <= 0 THEN
		                                EXECUTE IMMEDIATE '
			                                CREATE TABLE SYS_LOCKER(
			                                  ID NUMBER(10,0) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
			                                  BUSINESS_TYPE VARCHAR2(32) NOT NULL,
			                                  BUSINESS_CODE VARCHAR2(32) NOT NULL,
			                                  BEGIN_TIME NUMBER(15,0) NOT NULL,
			                                  END_TIME NUMBER(15,0) NOT NULL,
			                                  IP VARCHAR2(32),
			                                  TOKEN VARCHAR2(32) NOT NULL,
			                                  DELAY_TIMES NUMBER(10,0) DEFAULT 0 NOT NULL,
			                                  IS_PERSISTENCE NUMBER(1) DEFAULT 0 NOT NULL,
			                                  LOCK_MSG NVARCHAR2(100),
			                                  CONFLICT_MSG NVARCHAR2(100),
			                                  HOST_NAME NVARCHAR2(50),
			                                  OPER_CODE VARCHAR2 (20),
			                                  OPER_NAME NVARCHAR2 (50),
			                                  OPER_TYPE VARCHAR2 (20),
			                                  OPER_TIME TIMESTAMP(6) DEFAULT SYSTIMESTAMP NOT NULL
			                                )';
		
		                                EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX UN_SYSLOCKER_BUSINESS ON SYS_LOCKER(BUSINESS_TYPE, BUSINESS_CODE)';
		                                EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX UN_SYSLOCKER_TOKEN ON SYS_LOCKER(TOKEN)';
		
		                                EXECUTE IMMEDIATE 'COMMENT ON COLUMN SYS_LOCKER.BUSINESS_TYPE IS ''业务类型''';
		                                EXECUTE IMMEDIATE 'COMMENT ON COLUMN SYS_LOCKER.BUSINESS_CODE IS ''业务代码''';
		                                EXECUTE IMMEDIATE 'COMMENT ON COLUMN SYS_LOCKER.BEGIN_TIME IS ''锁定时间''';
		                                EXECUTE IMMEDIATE 'COMMENT ON COLUMN SYS_LOCKER.END_TIME IS ''过期时间''';
		                                EXECUTE IMMEDIATE 'COMMENT ON COLUMN SYS_LOCKER.IP IS ''IP''';
		                                EXECUTE IMMEDIATE 'COMMENT ON COLUMN SYS_LOCKER.TOKEN IS ''控制重入或校验的TOKEN''';
		                                EXECUTE IMMEDIATE 'COMMENT ON COLUMN SYS_LOCKER.DELAY_TIMES IS ''延期存活次数''';
		                                EXECUTE IMMEDIATE 'COMMENT ON COLUMN SYS_LOCKER.IS_PERSISTENCE IS ''是否持久化''';
		                                EXECUTE IMMEDIATE 'COMMENT ON COLUMN SYS_LOCKER.LOCK_MSG IS ''锁定消息''';
		                                EXECUTE IMMEDIATE 'COMMENT ON COLUMN SYS_LOCKER.CONFLICT_MSG IS ''并发提示消息''';
		                                EXECUTE IMMEDIATE 'COMMENT ON COLUMN SYS_LOCKER.HOST_NAME IS ''主机名''';
		                                EXECUTE IMMEDIATE 'COMMENT ON COLUMN SYS_LOCKER.OPER_CODE IS ''操作者代码''';
		                                EXECUTE IMMEDIATE 'COMMENT ON COLUMN SYS_LOCKER.OPER_NAME IS ''操作者姓名''';
		                                EXECUTE IMMEDIATE 'COMMENT ON COLUMN SYS_LOCKER.OPER_TYPE IS ''操作类型''';
		                                EXECUTE IMMEDIATE 'COMMENT ON COLUMN SYS_LOCKER.OPER_TIME IS ''操作时间''';

	                                END IF;
                                COMMIT;
                                END;
                            ";

        private const string INSERT = @"
                                DECLARE
                                    CURRENT_STAMP NUMBER(15,0);
                                BEGIN

	                                SELECT 
		                                (SYSDATE - TO_DATE('1970-01-01', 'YYYY-MM-DD HH24')) * 86400000 + TO_NUMBER(TO_CHAR(SYSTIMESTAMP(3), 'FF')) INTO CURRENT_STAMP
	                                FROM DUAL;
 
	                                DELETE SYS_LOCKER WHERE END_TIME < CURRENT_STAMP;

	                                INSERT INTO SYS_LOCKER(
		                                BUSINESS_TYPE,
		                                BUSINESS_CODE,
		                                BEGIN_TIME,
		                                END_TIME,
		                                IP,
		                                TOKEN,
		                                DELAY_TIMES,
                                        IS_PERSISTENCE,
		                                LOCK_MSG,
		                                CONFLICT_MSG,
		                                HOST_NAME,
		                                OPER_CODE,
		                                OPER_NAME,
		                                OPER_TYPE,
		                                OPER_TIME)
	                                VALUES(
		                                :BusinessType,
		                                :BusinessCode,
		                                CURRENT_STAMP,
		                                CURRENT_STAMP + :Duation,
		                                :IP,
		                                :Token,
		                                :DelayTimes,
		                                :IsPersistence,
		                                :LockMsg,
		                                :ConflictMsg,
		                                :HostName,
		                                :OperCode,
		                                :OperName,
		                                :OperType,
		                                SYSTIMESTAMP
	                                );

                                COMMIT;
                                END;
                            ";

        private const string SELECT = @"
                                SELECT
	                                BUSINESS_TYPE   AS   ""BusinessType"",
                                    BUSINESS_CODE   AS   ""BusinessCode"",
	                                BEGIN_TIME      AS   ""BeginTime"",
	                                END_TIME        AS   ""EndTime"",
	                                IP              AS   ""IP"",
	                                TOKEN           AS   ""Token"",
	                                DELAY_TIMES     AS   ""DelayTimes"",
	                                IS_PERSISTENCE  AS   ""IsPersistence"",
	                                LOCK_MSG        AS   ""LockMsg"",
	                                CONFLICT_MSG    AS   ""ConflictMsg"",
	                                HOST_NAME       AS   ""HostName"",
	                                OPER_CODE       AS   ""OperCode"",
	                                OPER_NAME       AS   ""OperName"",
	                                OPER_TYPE       AS   ""OperType"",
	                                OPER_TIME       AS   ""OperTime""
                                FROM
                                    SYS_LOCKER
                                WHERE
                                    BUSINESS_TYPE   =   :BusinessType
                                AND BUSINESS_CODE   =   :BusinessCode
                            ";

        private const string DELETE = @"
                                DELETE FROM SYS_LOCKER 
                                WHERE 
                                    TOKEN = :Token
                                AND IS_PERSISTENCE <> 1
                            ";

        private const string UPDATE = @"
                                UPDATE SYS_LOCKER 
                                SET 
                                    DELAY_TIMES = DELAY_TIMES + 1, 
                                    END_TIME = END_TIME + :Delay 
                                WHERE
                                    TOKEN = :Token
                            ";


        private readonly ILockOptions _options;

        public OracleDatabaseDistributedLockAdapter(ILockOptions options)
        {
            UtilMethods.ThrowIfNull(options, nameof(options));

            _options = options;
        }

        public bool CheckIfConflictException(Exception exception)
        {
            if (exception is OracleException oex)
            {
                if (oex.Errors != null)
                {
                    foreach (var error in oex.Errors)
                    {
                        if (error is OracleError oerror
                            && oerror.Number == 1)
                        {
                            return true;
                        }
                    }
                }
            }

            if (exception.Message
                .ToUpper()
                .Contains("ORA-00001"))
            {
                return true;
            }

            return false;
        }

        public DbConnection CreateDbConnection()
        {
            var exoptions = this._options.FindExtension<OracleDataBaseLockOptionsExtension>();
            return new OracleConnection(exoptions.ConnectionString);
        }

        public string CreateCreate()
        {
            return CREATE;
        }

        public string CreateInsert(Locker locker)
        {
            return INSERT;
        }

        public string CreateDelete(Lockey lockey)
        {
            return DELETE;
        }

        public string CreateSelect(Lockey lockey)
        {
            return SELECT;
        }

        public string CreateUpdate(Lockey lockey)
        {
            return UPDATE;
        }
    }
}
